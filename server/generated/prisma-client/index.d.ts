// Code generated by Prisma (prisma@1.33.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  state: (where?: StateWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  state: (where: StateWhereUniqueInput) => StateNullablePromise;
  states: (args?: {
    where?: StateWhereInput;
    orderBy?: StateOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<State>;
  statesConnection: (args?: {
    where?: StateWhereInput;
    orderBy?: StateOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => StateConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createState: (data: StateCreateInput) => StatePromise;
  updateState: (args: {
    data: StateUpdateInput;
    where: StateWhereUniqueInput;
  }) => StatePromise;
  updateManyStates: (args: {
    data: StateUpdateManyMutationInput;
    where?: StateWhereInput;
  }) => BatchPayloadPromise;
  upsertState: (args: {
    where: StateWhereUniqueInput;
    create: StateCreateInput;
    update: StateUpdateInput;
  }) => StatePromise;
  deleteState: (where: StateWhereUniqueInput) => StatePromise;
  deleteManyStates: (where?: StateWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  state: (
    where?: StateSubscriptionWhereInput
  ) => StateSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type StateOrderByInput = "id_ASC" | "id_DESC" | "time_ASC" | "time_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "barcode_ASC"
  | "barcode_DESC"
  | "pw_ASC"
  | "pw_DESC"
  | "comm_ASC"
  | "comm_DESC"
  | "name_ASC"
  | "name_DESC"
  | "score_ASC"
  | "score_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  barcode: Int;
  pw: String;
  comm: String;
  name: String;
  score: Int;
}

export type StateWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface StateUpdateInput {
  time?: Maybe<Int>;
}

export interface StateSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<StateWhereInput>;
  AND?: Maybe<StateSubscriptionWhereInput[] | StateSubscriptionWhereInput>;
  OR?: Maybe<StateSubscriptionWhereInput[] | StateSubscriptionWhereInput>;
  NOT?: Maybe<StateSubscriptionWhereInput[] | StateSubscriptionWhereInput>;
}

export interface StateWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  time?: Maybe<Int>;
  time_not?: Maybe<Int>;
  time_in?: Maybe<Int[] | Int>;
  time_not_in?: Maybe<Int[] | Int>;
  time_lt?: Maybe<Int>;
  time_lte?: Maybe<Int>;
  time_gt?: Maybe<Int>;
  time_gte?: Maybe<Int>;
  AND?: Maybe<StateWhereInput[] | StateWhereInput>;
  OR?: Maybe<StateWhereInput[] | StateWhereInput>;
  NOT?: Maybe<StateWhereInput[] | StateWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  barcode?: Maybe<Int>;
  barcode_not?: Maybe<Int>;
  barcode_in?: Maybe<Int[] | Int>;
  barcode_not_in?: Maybe<Int[] | Int>;
  barcode_lt?: Maybe<Int>;
  barcode_lte?: Maybe<Int>;
  barcode_gt?: Maybe<Int>;
  barcode_gte?: Maybe<Int>;
  pw?: Maybe<String>;
  pw_not?: Maybe<String>;
  pw_in?: Maybe<String[] | String>;
  pw_not_in?: Maybe<String[] | String>;
  pw_lt?: Maybe<String>;
  pw_lte?: Maybe<String>;
  pw_gt?: Maybe<String>;
  pw_gte?: Maybe<String>;
  pw_contains?: Maybe<String>;
  pw_not_contains?: Maybe<String>;
  pw_starts_with?: Maybe<String>;
  pw_not_starts_with?: Maybe<String>;
  pw_ends_with?: Maybe<String>;
  pw_not_ends_with?: Maybe<String>;
  comm?: Maybe<String>;
  comm_not?: Maybe<String>;
  comm_in?: Maybe<String[] | String>;
  comm_not_in?: Maybe<String[] | String>;
  comm_lt?: Maybe<String>;
  comm_lte?: Maybe<String>;
  comm_gt?: Maybe<String>;
  comm_gte?: Maybe<String>;
  comm_contains?: Maybe<String>;
  comm_not_contains?: Maybe<String>;
  comm_starts_with?: Maybe<String>;
  comm_not_starts_with?: Maybe<String>;
  comm_ends_with?: Maybe<String>;
  comm_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  score?: Maybe<Int>;
  score_not?: Maybe<Int>;
  score_in?: Maybe<Int[] | Int>;
  score_not_in?: Maybe<Int[] | Int>;
  score_lt?: Maybe<Int>;
  score_lte?: Maybe<Int>;
  score_gt?: Maybe<Int>;
  score_gte?: Maybe<Int>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface StateCreateInput {
  id?: Maybe<ID_Input>;
  time: Int;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  barcode?: Maybe<Int>;
  name?: Maybe<String>;
}>;

export interface UserUpdateManyMutationInput {
  barcode?: Maybe<Int>;
  pw?: Maybe<String>;
  comm?: Maybe<String>;
  name?: Maybe<String>;
  score?: Maybe<Int>;
}

export interface StateUpdateManyMutationInput {
  time?: Maybe<Int>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface UserUpdateInput {
  barcode?: Maybe<Int>;
  pw?: Maybe<String>;
  comm?: Maybe<String>;
  name?: Maybe<String>;
  score?: Maybe<Int>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface UserPreviousValues {
  id: ID_Output;
  barcode: Int;
  pw: String;
  comm: String;
  name: String;
  score: Int;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  barcode: () => Promise<Int>;
  pw: () => Promise<String>;
  comm: () => Promise<String>;
  name: () => Promise<String>;
  score: () => Promise<Int>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  barcode: () => Promise<AsyncIterator<Int>>;
  pw: () => Promise<AsyncIterator<String>>;
  comm: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  score: () => Promise<AsyncIterator<Int>>;
}

export interface StateConnection {
  pageInfo: PageInfo;
  edges: StateEdge[];
}

export interface StateConnectionPromise
  extends Promise<StateConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<StateEdge>>() => T;
  aggregate: <T = AggregateStatePromise>() => T;
}

export interface StateConnectionSubscription
  extends Promise<AsyncIterator<StateConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<StateEdgeSubscription>>>() => T;
  aggregate: <T = AggregateStateSubscription>() => T;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface StateSubscriptionPayload {
  mutation: MutationType;
  node: State;
  updatedFields: String[];
  previousValues: StatePreviousValues;
}

export interface StateSubscriptionPayloadPromise
  extends Promise<StateSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = StatePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = StatePreviousValuesPromise>() => T;
}

export interface StateSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<StateSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = StateSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = StatePreviousValuesSubscription>() => T;
}

export interface StatePreviousValues {
  id: ID_Output;
  time: Int;
}

export interface StatePreviousValuesPromise
  extends Promise<StatePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  time: () => Promise<Int>;
}

export interface StatePreviousValuesSubscription
  extends Promise<AsyncIterator<StatePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  time: () => Promise<AsyncIterator<Int>>;
}

export interface StateEdge {
  node: State;
  cursor: String;
}

export interface StateEdgePromise extends Promise<StateEdge>, Fragmentable {
  node: <T = StatePromise>() => T;
  cursor: () => Promise<String>;
}

export interface StateEdgeSubscription
  extends Promise<AsyncIterator<StateEdge>>,
    Fragmentable {
  node: <T = StateSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface User {
  id: ID_Output;
  barcode: Int;
  pw: String;
  comm: String;
  name: String;
  score: Int;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  barcode: () => Promise<Int>;
  pw: () => Promise<String>;
  comm: () => Promise<String>;
  name: () => Promise<String>;
  score: () => Promise<Int>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  barcode: () => Promise<AsyncIterator<Int>>;
  pw: () => Promise<AsyncIterator<String>>;
  comm: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  score: () => Promise<AsyncIterator<Int>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  barcode: () => Promise<Int>;
  pw: () => Promise<String>;
  comm: () => Promise<String>;
  name: () => Promise<String>;
  score: () => Promise<Int>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface State {
  id: ID_Output;
  time: Int;
}

export interface StatePromise extends Promise<State>, Fragmentable {
  id: () => Promise<ID_Output>;
  time: () => Promise<Int>;
}

export interface StateSubscription
  extends Promise<AsyncIterator<State>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  time: () => Promise<AsyncIterator<Int>>;
}

export interface StateNullablePromise
  extends Promise<State | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  time: () => Promise<Int>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AggregateState {
  count: Int;
}

export interface AggregateStatePromise
  extends Promise<AggregateState>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateStateSubscription
  extends Promise<AsyncIterator<AggregateState>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "State",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
